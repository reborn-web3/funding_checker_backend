import ccxt
import time
import numpy as np
from typing import Dict, List, Tuple

class FundingArbitrage:
    def __init__(self):
        self.exchanges = {
            'bybit': ccxt.bybit({'enableRateLimit': True}),
            'gate': ccxt.gateio({'enableRateLimit': True}),

        }
        
    def get_weighted_orderbook(self, symbol: str, depth: int = 10) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—Ç–∞–∫–∞–Ω —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂"""
        orderbooks = {}
        
        for name, exchange in self.exchanges.items():
            try:
                orderbook = exchange.fetch_order_book(symbol, depth * 2)
                orderbooks[name] = orderbook
                time.sleep(0.1)  # Rate limiting
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {name}: {e}")
        
        return orderbooks
    
    def calculate_optimal_prices(self, orderbooks: Dict, amount: float) -> Tuple[float, float, str, str]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        best_buy = {'price': 0, 'exchange': '', 'available': 0}
        best_sell = {'price': float('inf'), 'exchange': '', 'available': 0}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
        for exchange, ob in orderbooks.items():
            if 'bids' in ob and ob['bids']:
                cumulative_amount = 0
                for price, qty in ob['bids']:
                    cumulative_amount += qty
                    if cumulative_amount >= amount:
                        if price > best_buy['price']:
                            best_buy = {'price': price, 'exchange': exchange, 'available': cumulative_amount}
                        break
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
        for exchange, ob in orderbooks.items():
            if 'asks' in ob and ob['asks']:
                cumulative_amount = 0
                for price, qty in ob['asks']:
                    cumulative_amount += qty
                    if cumulative_amount >= amount:
                        if price < best_sell['price']:
                            best_sell = {'price': price, 'exchange': exchange, 'available': cumulative_amount}
                        break
        
        return best_buy['price'], best_sell['price'], best_buy['exchange'], best_sell['exchange']
    
    def find_best_arbitrage_pair(self, amount: float = 0.1) -> Dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à—É—é –ø–∞—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        symbol = 'ZKC/USDT'
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–∫–∞–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂–∞—Ö...")
        orderbooks = self.get_weighted_orderbook(symbol)
        
        buy_price, sell_price, buy_exchange, sell_exchange = self.calculate_optimal_prices(orderbooks, amount)
        
        if buy_exchange and sell_exchange:
            spread = sell_price - buy_price
            spread_percent = (spread / buy_price) * 100
            
            return {
                'buy_exchange': buy_exchange,
                'sell_exchange': sell_exchange,
                'buy_price': buy_price,
                'sell_price': sell_price,
                'spread': spread,
                'spread_percent': spread_percent,
                'amount': amount,
                'potential_pnl': spread * amount if spread > 0 else 0
            }
        
        return None

    def monitor_spreads(self, monitoring_time: int = 300):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {monitoring_time} —Å–µ–∫—É–Ω–¥...")
        print("–í—Ä–µ–º—è | Buy Exch | Sell Exch | –°–ø—Ä–µ–¥ | –°–ø—Ä–µ–¥ % | PNL")
        print("-" * 60)
        
        start_time = time.time()
        best_spread = float('inf')
        best_opportunity = None
        
        while time.time() - start_time < monitoring_time:
            try:
                opportunity = self.find_best_arbitrage_pair(0.1)
                
                if opportunity and opportunity['spread'] > 0:
                    current_time = time.strftime("%H:%M:%S")
                    print(f"{current_time} | {opportunity['buy_exchange']:8} | {opportunity['sell_exchange']:8} | "
                          f"{opportunity['spread']:6.2f} | {opportunity['spread_percent']:6.4f}% | "
                          f"{opportunity['potential_pnl']:6.4f}")
                    
                    if opportunity['spread'] < best_spread:
                        best_spread = opportunity['spread']
                        best_opportunity = opportunity
                
                time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
        
        print("\nüéØ –õ—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥:")
        if best_opportunity:
            self.print_opportunity(best_opportunity)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

    def print_opportunity(self, opportunity: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        print("=" * 60)
        print("üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
        print("=" * 60)
        print(f"–ö—É–ø–∏—Ç—å –Ω–∞: {opportunity['buy_exchange'].upper()}")
        print(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${opportunity['buy_price']:.2f}")
        print(f"–ü—Ä–æ–¥–∞—Ç—å –Ω–∞: {opportunity['sell_exchange'].upper()}")
        print(f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${opportunity['sell_price']:.2f}")
        print(f"–°–ø—Ä–µ–¥: ${opportunity['spread']:.4f} ({opportunity['spread_percent']:.6f}%)")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {opportunity['amount']} ZKC")
        print(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π PNL: ${opportunity['potential_pnl']:.4f}")
        print("=" * 60)

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
if __name__ == "__main__":
    arb = FundingArbitrage()
    arb.monitor_spreads(60)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 60 —Å–µ–∫—É–Ω–¥